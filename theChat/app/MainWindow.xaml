<mah:MetroWindow x:Class="theChat.MainWindow"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                 
                 Background="#ffffff"
        
           xmlns:mah="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
       
        xmlns:utils="clr-namespace:theChat.utils"
                BorderBrush="#121212"
        xmlns:local="clr-namespace:theChat.Viewmodels" xmlns:ui="clr-namespace:theChat.ui" 
       
        Closing="Window_Closing"
 
      
        >

    <mah:MetroWindow.Resources>
        <local:ChatViewModel x:Key="ChatViewModel" />
        <utils:ImageToBitmapSource x:Key="ImageToBitmapSource"/>
        <utils:chatNameColor x:Key="chatNameColor"/>
        <utils:chatWindowHeight x:Key="chatWindowHeight"/>
 
        <Style TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>

            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="Padding" Value="2,0,0,0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>

                            <Trigger Property="IsSelected" Value="true">
                                <Setter Property="Background" Value="#2a2a2a"/>
                            </Trigger>

                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="true"/>
                                    <Condition Property="Selector.IsSelectionActive" Value="true"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="#2a2a2a"/>
                                <Setter Property="BorderThickness" Value="0"/>
                            </MultiTrigger>
                            
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Cursor" Value="Hand"/>
                                <Setter Property="Background" Value="#2a2a2a"/>
                            </Trigger>
                            
                            <Trigger Property="IsFocused" Value="True">
                                <Setter Property="Background" Value="#2a2a2a"/>
                                <Setter Property="BorderThickness" Value="0"/>
                            </Trigger>
                            
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style TargetType="Button" x:Key="btnReceive">

            <Setter Property="Background" Value="#333399" />
            <Setter Property="Height" Value="36"/>
            <Setter Property="BorderThickness" Value="0"/>

            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="Foreground" Value="#b8b8e6"/>
            
            <Setter Property="Button.IsEnabled" Value="True"/>
            <Setter Property="Button.Visibility" Value="Visible"/>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

   
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="#2a2a2a"/>
                    <Setter Property="Foreground" Value="#333399"/>

                </Trigger>

                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#4a4abd"/>
                </Trigger>

                
                <DataTrigger Binding="{Binding IsListening}" Value="True">
                        <Setter Property="Button.Visibility" Value="Hidden"/>
                    </DataTrigger>

                    <DataTrigger Binding="{Binding ElementName=tboxUserPortNumber, Path=(Validation.HasError)}" Value="True">
                        <Setter Property="Button.IsEnabled" Value="False"/>
                    </DataTrigger>

                    <DataTrigger  Binding="{Binding ElementName=tboxUsername, Path=(Validation.HasError)}" Value="True" >
                        <Setter Property="Button.IsEnabled" Value="False"/>
                    </DataTrigger>

                    <DataTrigger  Binding="{Binding ElementName=tboxUsername, Path=Text}" Value="">
                        <Setter Property="Button.IsEnabled" Value="False"/>
                    </DataTrigger>

                    <DataTrigger Binding="{Binding ElementName=tboxUserPortNumber, Path=Text}" Value="">
                        <Setter Property="Button.IsEnabled" Value="False"/>
                    </DataTrigger>
              
            </Style.Triggers>
        </Style>

        <!--nytt-->
        <Style TargetType="Button" x:Key="btnSendChatRequest">

            <Setter Property="Background" Value="#333399" />
            <Setter Property="Height" Value="36"/>
            <Setter Property="BorderThickness" Value="0"/>

            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="Foreground" Value="#b8b8e6" />

            <Setter Property="Button.IsEnabled" Value="True"/>
            <Setter Property="Button.Visibility" Value="Visible"/>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="#2a2a2a"/>
                    <Setter Property="Foreground" Value="#333399"/>
                
                </Trigger>

                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#4a4abd"/>
                </Trigger>

                <DataTrigger  Binding="{Binding ElementName=tboxUsername, Path=(Validation.HasError)}" Value="True" >
                    <Setter Property="Button.IsEnabled" Value="False"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding ElementName=tboxPeerPortNumber, Path=(Validation.HasError)}" Value="True">
                    <Setter Property="Button.IsEnabled" Value="False"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding ElementName=tboxPeerIpAddress, Path=(Validation.HasError)}" Value="True">
                    <Setter Property="Button.IsEnabled" Value="False"/>
                </DataTrigger>

                <DataTrigger  Binding="{Binding ElementName=tboxUsername, Path=Text}" Value="">
                    <Setter Property="Button.IsEnabled" Value="False"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding ElementName=tboxPeerPortNumber, Path=Text}" Value="">
                    <Setter Property="Button.IsEnabled" Value="False"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding ElementName=tboxPeerIpAddress, Path=Text}" Value="">
                    <Setter Property="Button.IsEnabled" Value="False"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>


        <Style TargetType="Button" x:Key="btnStopListening">
          
            <Setter Property="Button.Visibility" Value="Hidden"/>
            <Setter Property="Button.IsEnabled" Value="False"/>

            <Setter Property="Background" Value="#333399" />
            <Setter Property="Height" Value="36"/>
            <Setter Property="BorderThickness" Value="0"/>

            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="Foreground" Value="#b8b8e6" />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                
                <DataTrigger Binding="{Binding IsListening}" Value="True">
                    <Setter Property="Button.Visibility" Value="Visible"/>
                    <Setter Property="Button.IsEnabled" Value="True"/>
                </DataTrigger>

                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#5050b3"/>
                </Trigger>
               
            </Style.Triggers>
        </Style>


        <Style TargetType="Button" x:Key="btnSendMessage">
            <Setter Property="Visibility" Value="Hidden"/>

            <Setter Property="Background" Value="#333399" />
            <Setter Property="Height" Value="36"/>
            <Setter Property="BorderThickness" Value="0"/>

            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="Foreground" Value="#b8b8e6" />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <DataTrigger Binding="{Binding MessagingControlsVisibility}" Value="true">
                    <Setter Property="Visibility" Value="Visible"/>
                </DataTrigger>

                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#4a4abd"/>
                </Trigger>

            </Style.Triggers>
        </Style>


        <Style TargetType="Button" x:Key="btnLeaveChat">
            <Setter Property="Visibility" Value="Hidden"/>

            <Setter Property="Background" Value="#333399" />
            <Setter Property="Height" Value="36"/>
            <Setter Property="BorderThickness" Value="0"/>

            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="Foreground" Value="#b8b8e6" />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>

                <DataTrigger Binding="{Binding LeaveChatButtonVisibility}" Value="true">
                    <Setter Property="Visibility" Value="Visible"/>
                </DataTrigger>

                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#4a4abd"/>
                </Trigger>

            </Style.Triggers>
        </Style>

        <Style TargetType="Button" x:Key="btnNewRequest">

            <Setter Property="Background" Value="#333399" />
            <Setter Property="BorderThickness" Value="0"/>

            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="Foreground" Value="#b8b8e6" />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#4a4abd"/>
                </Trigger>

            </Style.Triggers>
        </Style>

    </mah:MetroWindow.Resources>

<mah:MetroWindow.DataContext>
        <local:ChatViewModel x:Name="ChatViewModel" />

    </mah:MetroWindow.DataContext>

    <DockPanel>
   
        
        <TabControl DockPanel.Dock="Left" Background="#212121" Margin="-1 0 0 -1 ">
            <TabControl.Resources>
                <Style TargetType="TabItem">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="TabItem">
                                <Grid Name="Panel">
                                    <ContentPresenter x:Name="ContentSite"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Center"
                                        ContentSource="Header"
                                        
                                    
                                        Margin="10,2"/>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter TargetName="Panel" Property="Background" Value="#212121" />
                                        <Setter Property="Margin" TargetName="Panel" Value="-2"/>
                                    </Trigger>
                                    <Trigger Property="IsSelected" Value="False">
                                        <Setter Property="Margin" TargetName="Panel" Value="-2"/>
                                        <Setter TargetName="Panel" Property="Background" Value="#383838" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </TabControl.Resources>

            <TabItem >

                <TabItem.Header>
                    <TextBlock Foreground="#ffffff" FontWeight="Bold" FontSize="16" Text="Begin Chatting!"/>
                </TabItem.Header>
               


                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="auto"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="auto"/>
                        <RowDefinition Height="auto"/>
                        <RowDefinition Height="auto"/>
                        <RowDefinition Height="auto"/>
                        <RowDefinition Height="auto"/>
                        <RowDefinition Height="auto"/>
                        <RowDefinition Height="auto"/>
                        <RowDefinition Height="auto"/>
                        <RowDefinition Height="auto"/>
                        <RowDefinition Height="auto"/>
                    </Grid.RowDefinitions>
                    <TextBlock Grid.Column="0" Grid.Row="0" Margin="16 20 0 5" Height="20" VerticalAlignment="Top" FontSize ="14" FontWeight="DemiBold" Foreground="#6a6a6a">Enter username</TextBlock>
                    <TextBox Foreground="#c2c2c2"  Background="#2a2a2a" Grid.Column="1" Grid.Row="0" Margin="0 20 16 5" Name="tboxUsername" Width="100"  Height="24" VerticalAlignment="Top" BorderThickness="0" VerticalContentAlignment="Center"
                             Padding="4" Text="{Binding Username,
                        ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" >

                        <TextBox.ToolTip>

                            <TextBlock Text="{Binding MyInputValidator.Errors[Username]}">
                                
                                 
                            </TextBlock>
                        </TextBox.ToolTip>
                    </TextBox>

                    <TextBlock Grid.Column="0" Grid.Row="1" Margin="16 20 0 5" VerticalAlignment="Top" FontSize="20" FontWeight="Bold" Foreground="#c2c2c2" >Send a chat request</TextBlock>
                    <TextBlock Grid.Column="0" Grid.Row="2" Margin="16 20 0 5" Height="20" VerticalAlignment="Top" FontSize ="14" FontWeight="DemiBold" Foreground="#6a6a6a">Enter ip-address</TextBlock>
                    <TextBox Grid.Column="1" Grid.Row="2" Margin="0 20 16 5" Name="tboxPeerIpAddress" Width="100"  Height="24" VerticalAlignment="Top"
                             Background="#2a2a2a"
                             Foreground="#c2c2c2"
                             BorderThickness="0" VerticalContentAlignment="Center"
                             Padding="4" Text="{Binding PeerIPAddress,
                        ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">

                        <TextBox.ToolTip>

                            <TextBlock Text="{Binding MyInputValidator.Errors[PeerIPAddress]}">


                            </TextBlock>
                        </TextBox.ToolTip>

                    </TextBox>




                    <TextBlock Grid.Column="0" Grid.Row="3" Margin="16 10 0 5" Height="20" VerticalAlignment="Top"  FontSize ="14" FontWeight="DemiBold" Foreground="#6a6a6a">Enter port number</TextBlock>
                    <TextBox  Foreground="#c2c2c2"   Background="#2a2a2a" Grid.Column="1" Grid.Row="3" Margin="0 10 16 5" Name="tboxPeerPortNumber" Width="100"  Height="24" VerticalAlignment="Top" BorderThickness="0" VerticalContentAlignment="Center"
                             Padding="4" Text="{Binding PeerPortNumber,
                        ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">


                        <TextBox.ToolTip>

                            <TextBlock Text="{Binding MyInputValidator.Errors[PeerPortNumber]}">


                            </TextBlock>
                        </TextBox.ToolTip>
                    </TextBox>



                    <Button Content="Send" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="5" Margin="5 20 5 5" Name="btnSendChatRequest" 
                            Command="{Binding SendChatRequestCommand}" Style="{StaticResource btnSendChatRequest}">


                    </Button>
                    



                    <TextBlock Grid.Column="0" Grid.Row="7" Margin="16 20 0 5" VerticalAlignment="Top" FontWeight="Bold" FontSize="20" Foreground="#c2c2c2" >Start receiving chat requests</TextBlock>
                    <TextBlock Grid.Column="0" Grid.Row="8" Margin="16 10 0 5" Height="20" VerticalAlignment="Top" FontSize ="14" FontWeight="DemiBold" Foreground="#6a6a6a">Enter port</TextBlock>
                    <TextBox Foreground="#c2c2c2"  Background="#2a2a2a" Grid.Column="1" Grid.Row="8" Margin="0 10 16 5" Name="tboxUserPortNumber"  Width="100" Height="24" VerticalAlignment="Top" BorderThickness="0" VerticalContentAlignment="Center"
                             Padding="4"
                             Text="{Binding UserPortNumber,
                        ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}">


                        <TextBox.ToolTip>

                            <TextBlock Text="{Binding MyInputValidator.Errors[UserPortNumber]}">


                            </TextBlock>
                        </TextBox.ToolTip>

                    </TextBox>

                    <Button  Content="Receive" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="9"  Margin="5 20 5 5" VerticalAlignment="Top" Name="btnStartListening"
                             Command="{Binding StartListeningCommand}" Style="{StaticResource btnReceive}">

                    </Button>

                    <Button  Content="Stop Listening" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="9" Margin="5 20 5 5" VerticalAlignment="Top" Name="btnStopListening" 
                             Command="{Binding StopListeningCommand}" Style="{StaticResource btnStopListening}" />
                    


                </Grid>
            </TabItem>
            <TabItem>
                <TabItem.Header >

                    <mah:Badged Badge="{Binding UnreadNotices}" BadgeBackground="#9D1F42" BadgeForeground="white" Margin="16">

                      
                        <TextBlock Foreground="#ffffff" FontWeight="Bold" FontSize="16" Text="Chats"></TextBlock>
                    </mah:Badged>
                 
                  
                    <!--<TextBlock Foreground="#ffffff" FontWeight="Bold" FontSize="16" Text="Chats">
                    </TextBlock>-->
                </TabItem.Header>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                <ui:MyListBox Grid.Row ="0" Grid.Column="0" x:Name="ChatsBox" Margin="0 24 0 0" IsSynchronizedWithCurrentItem="True" BorderThickness="0" Background="#212121"
             ItemsSource="{Binding Path=Peers}" KeyboardNavigation.TabNavigation="Continue">

                    <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                            <i:InvokeCommandAction Command="{Binding ShowChatCommand}" CommandParameter="{Binding ElementName=ChatsBox, Path=SelectedItem}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    <ListBox.InputBindings>
                        <KeyBinding Key="Return" Command="{Binding ShowChatCommand}" CommandParameter="{Binding ElementName=ChatsBox, Path=SelectedItem}" />
                    </ListBox.InputBindings>

                        <ui:MyListBox.ItemTemplate >
                        <DataTemplate >
                                <Grid>

                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="auto"/>
                                        <ColumnDefinition Width="auto"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="auto"/>
                                        <RowDefinition Height="auto"/>
                                        <RowDefinition Height="auto"/>
                                      
                                    </Grid.RowDefinitions>


                                    <TextBlock Grid.Column="0" Grid.Row="0" Foreground="#c2c2c2" Margin="16 0 0 8" FontWeight="Bold" Text="{Binding Name }">
                                        <TextBlock.Style>
                                            <Style TargetType="{x:Type TextBlock}">
                                                <Setter Property="Visibility" Value="Visible"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Name}" Value="{x:Null}">
                                                        <Setter Property="Visibility" Value="Collapsed"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBlock.Style>
                                    </TextBlock>

                                    <TextBlock Grid.Row="1" Grid.Column="0" Foreground="#c2c2c2" Margin="16 0 0 8" FontWeight="Bold" Text="{Binding Status }">
                                        <TextBlock.Style>
                                            <Style TargetType="{x:Type TextBlock}">
                                                <Setter Property="Visibility" Value="Visible"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Status}" Value="{x:Null}">
                                                        <Setter Property="Visibility" Value="Collapsed"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBlock.Style>
                                    </TextBlock>

                                    <TextBlock Grid.Column="1" Grid.Row="0" Foreground="#c2c2c2" Margin="16 0 0 8" FontWeight="Bold" Text="Buzzing!">

                                    <TextBlock.Style>
                                        <Style TargetType="{x:Type TextBlock}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsBuzzing}" Value="true">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                                    </TextBlock.Style>
                                </TextBlock>

                                    <Ellipse Grid.Column="2" Grid.Row="0" Grid.RowSpan="3" Width="14" Height="14"  Margin="0 0 16 0" Fill="#333399" HorizontalAlignment="Right">
                                        <Ellipse.Style>
                                            <Style TargetType="{x:Type Ellipse}">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding HasUnreadNotice}" Value="true">
                                                        <Setter Property="Visibility" Value="Visible"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Ellipse.Style>
                                    </Ellipse>

                                <TextBlock Grid.Row="2" Grid.Column="0" Foreground="#c2c2c2" Margin="16 0 0 8" FontWeight="Bold" Text="{Binding IPAddress }"/>

                            </Grid>
                        </DataTemplate>
                    </ui:MyListBox.ItemTemplate>
                </ui:MyListBox>
                </Grid>
            </TabItem>


            <TabItem>
                <TabItem.Header >

                        <TextBlock Foreground="#ffffff" FontWeight="Bold" FontSize="16" Text="History"/>
                   
                </TabItem.Header>

             
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>


               
                        <StackPanel Orientation="Horizontal" Grid.Row="0" Grid.Column="0">
                            <TextBlock VerticalAlignment="Top" Margin="16 20 0 5"  FontSize ="14" FontWeight="DemiBold" Foreground="#6a6a6a">Search username</TextBlock>
                            <TextBox BorderThickness="0" VerticalContentAlignment="Center"
                             Padding="4" Foreground="#c2c2c2"  Background="#2a2a2a"  VerticalAlignment="Top" Margin="32 20 16 5" Name="searchHistory" Width="100" Text="{Binding HistorySearchString, 
                        UpdateSourceTrigger=PropertyChanged,
                        Mode=OneWayToSource}"/>
                        </StackPanel>

                        <ui:MyListBox Grid.Row="1" Grid.Column="0" x:Name="HistoryBox" Margin="16 24 0 0" IsSynchronizedWithCurrentItem="True" BorderThickness="0" Background="#212121"
             ItemsSource="{Binding Path=CurrentHistory}" KeyboardNavigation.TabNavigation="Continue">

                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                                <i:InvokeCommandAction Command="{Binding ShowHistoryCommand}" CommandParameter="{Binding ElementName=HistoryBox, Path=SelectedItem}"/>
                            </i:EventTrigger>

                        </i:Interaction.Triggers>
                        <ListBox.InputBindings>
                                <KeyBinding Key="Return" Command="{Binding ShowHistoryCommand}" CommandParameter="{Binding ElementName=HistoryBox, Path=SelectedItem}" />
                            </ListBox.InputBindings>


                            <ui:MyListBox.ItemTemplate>
                            
                            <DataTemplate >
                              
                                <StackPanel x:Name="HistoryStack" Orientation="Vertical"   >

                                    <StackPanel Orientation="Horizontal">

                                        <TextBlock Foreground="#c2c2c2" Margin="0 0 4 8" FontWeight="Bold" Text="{Binding PeerName, StringFormat={}{0} - }"/>
                                        <TextBlock Foreground="#c2c2c2" Margin="0 0 0 8" FontWeight="Bold" Text="{Binding IpAddress }"/>
                                    </StackPanel>

                                 
                                        <TextBlock Foreground="#8a8a8a" Margin="0 0 0 16" Text="{Binding StartDate }"/>



                                    </StackPanel>
                                </DataTemplate>
                            </ui:MyListBox.ItemTemplate>
                        </ui:MyListBox>
                    </Grid>
               
            </TabItem>

        </TabControl>

        <!--<StackPanel Orientation="Vertical">-->
        <Grid x:Name="ChatGrid" DockPanel.Dock="Right" Margin="20">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="*"/>
            
                <RowDefinition Height="auto"/>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="auto"/>
            </Grid.RowDefinitions>

            <TextBlock Grid.Column="0" Grid.Row="0" VerticalAlignment="Top" Foreground="#333399" FontSize="24" FontWeight="Light" Margin="0 0 0 24" Text="{Binding ChatWindowHeader}"></TextBlock>

            <TextBlock Grid.Column="0" Grid.Row="1"  Text="{Binding ChatInformation}">
                <TextBlock.Style>

                    <Style TargetType="{x:Type TextBlock}">
                        <Setter Property="Visibility" Value="Hidden"/>

                        <Setter Property="VerticalAlignment" Value="Center"/>

                        <Setter Property="HorizontalAlignment" Value="Center"/>

                        <Setter Property="FontSize" Value="16"/>

                        <Setter Property="FontWeight" Value="DemiBold" />

                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ChatInformationVisibility}" Value="true">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>


            </TextBlock>

            <StackPanel Grid.Column="0" Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Center" Margin="0 100 0 0">
                <StackPanel.Style>
                    <Style TargetType="{x:Type StackPanel}">
                        <Setter Property="Visibility" Value="Hidden"></Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding NewRequestBtnVisibility}" Value="true">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </StackPanel.Style>
                <Button  Content="Accept" Margin="0 0 16 0" Width="75" Height="36" Command="{Binding AcceptRequestCommand}" Style="{StaticResource btnNewRequest}" />
                <Button  Content="Decline" Width="75" Height="36" Command="{Binding DeclineRequestCommand}" Style="{StaticResource btnNewRequest}" />
            </StackPanel>
          
           
            <Button Grid.Column="1" Grid.Row="0"  Width="100" Content="Leave Chat" Command="{Binding LeaveChatCommand}" Style="{StaticResource btnLeaveChat}" />
          



            <ui:MyListBox x:Name="chat" Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="2" BorderThickness="0" 
                ItemsSource="{Binding Path=CurrentConversation}" ScrollViewer.HorizontalScrollBarVisibility="Disabled"   >
                <ui:MyListBox.Style>
                    <Style TargetType="{x:Type ListBox}">
                        <Setter Property="Visibility" Value="Hidden"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ConversationVisibility}" Value="true">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ui:MyListBox.Style>

                <ui:MyListBox.ItemContainerStyle>
                    <Style TargetType="ListBoxItem">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="ListBoxItem">
                                    <StackPanel>
                                        <Separator Background="#e0dfed" Margin="0 16 0 16" x:Name="Separator"/>
                                        <ContentPresenter/>
                                    </StackPanel>

                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ui:MyListBox.ItemContainerStyle>
                <ui:MyListBox.ItemTemplate >

                    <DataTemplate >
                        <StackPanel Orientation="Vertical">

                            <DockPanel DockPanel.Dock="Top">
                                <TextBlock DockPanel.Dock="Left" FontSize="16" Text="{Binding Sender}" Margin="0 0 10 0" Foreground="{Binding IsUser, Converter={StaticResource chatNameColor}}" FontWeight="Bold"/>
                                <TextBlock DockPanel.Dock="Top" FontSize="16" Text="{Binding Date}" Margin="0 0 0 4" FontWeight="Bold" Foreground="#464659"/>
                            </DockPanel>

                            <TextBlock Text="{Binding Content}" FontSize="18" Foreground="#464659" Margin="0 0 0 16" TextWrapping="Wrap"/>
                            
                            <Image HorizontalAlignment="Left"  MaxWidth="200" Source="{Binding TheImage, Converter={StaticResource ImageToBitmapSource}}">
                            </Image>

                        </StackPanel>
                        
                    </DataTemplate>
                </ui:MyListBox.ItemTemplate>
            </ui:MyListBox>

            <StackPanel Grid.Column="0" Grid.Row="2" Orientation="Horizontal" >
            <Image Source="{Binding CurrentImage}" MaxWidth="100" VerticalAlignment="Top">
                <Image.Style>
                    <Style TargetType="{x:Type Image}">
                        <Setter Property="Visibility" Value="Hidden"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsImageSelected}" Value="true">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Image.Style>
            </Image>
            <Button  Content="X" Width="20" Height="20" VerticalAlignment="Top" Margin="-22 0 0 0 " Background="Black" Foreground="White"
                      Command="{Binding RemoveImageCommand}" >
                <Button.Style>
                    <Style TargetType="{x:Type Button}">
                        <Setter Property="Visibility" Value="Hidden" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsImageSelected}" Value="true">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
            </StackPanel>

            <TextBox Grid.Column="0" Grid.Row="3" VerticalAlignment="Bottom" Text="{Binding ChatMessage, Mode=TwoWay}" Margin="0 0 8 0" Height="50" TextWrapping="Wrap">
                <TextBox.Style>
                    <Style TargetType="{x:Type TextBox}">
                        <Setter Property="Visibility" Value="Hidden"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding MessagingControlsVisibility}" Value="true">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBox.Style>
            </TextBox>

            <Button VerticalAlignment="Center" Grid.Column="1" Grid.Row="3"  Content="Send" Name="btnSendChatMessage" Padding="8"
                      
                        Style="{StaticResource btnSendMessage}"
                             Command="{Binding SendChatMessageCommand}" Margin="0 0 4 0"/>



            <StackPanel Grid.Column="0" Grid.Row="4" Orientation="Horizontal" Margin="0 4 0 0 ">

                <StackPanel.Style>
                    <Style TargetType="{x:Type StackPanel}">
                        <Setter Property="Visibility" Value="Hidden"/>

                        <Style.Triggers>
                            <DataTrigger Binding="{Binding MessagingControlsVisibility}" Value="true">

                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                            
                        </Style.Triggers>

                    </Style>
                    
                </StackPanel.Style>
                
                <Button VerticalAlignment="Bottom"  Padding="6"  Name="btnSendImage" 
                             Command="{Binding AttachImageCommand}" Margin="0 0 4 0" Background="Transparent" BorderThickness="0">

                    <Image Source="./images/image.png" Width="26" Height="26"/>

                 
                </Button>
                
                <Button VerticalAlignment="Bottom" Padding="2"  Name="btnSendBuzz" Background="Transparent" BorderThickness="0"
                             Command="{Binding SendBuzzCommand}">

                    <Image Source="./images/buzz (1).png" Width="32" Height="32"/>

                        
               
                </Button>

            </StackPanel>

           
        </Grid>
  
    </DockPanel>
  </mah:MetroWindow>
